Привет, меня зовут Артем и сегодня я хочу рассказать о своей курсовой работе "Эффективная реализация лямбда-функций в объектно-ориентированных языках программирования".

Давайте начнем, и начнем с небольшого идиоматического примера, который будет постепенно усложняться.

На примере вы можете видеть создание лямбда-функции, в данном случае --- это предикат, который вернет true, если остаток от деления числа будет больше, чем некоторая граница, в данном примере она равна пяти.

После чего, лямбда-функция передается в функцию pfv, которая будет фильтровать некоторую коллекцию c и выводить на экран те значения, которые удовлетворяют предикату.

И проблема в том, что аллокация анонимной функции произошла, хотя ее можно было избежать, т.к. лямбда-функция часто не утекает, как в этом случае.

Рассмотрим потенциальные оптимизации:
1. Скаляризация -- в таком случае мы не создаем объект, а используем его метод и поля напрямую. 
Но такой подход поможет только в случае, когда функция, в которую мы передаем объект может заинлайниться. 
Усложним пример, скажем, что функцию заинлайнить нельзя.

2. Стековая аллокация -- в этом случае мы создаем объект на стеке, избегая системного вызова, что существенно сэкономит время. 
И тем не менее, нужно анализом доказать, что у объекта не существует использований, в которых он становится частью более общей области видимости.
Усложним наш пример, добавив добавление в массив под условием. Таким образом, классический подход к стековой аллокации не сможет более нам помочь.


# Singleton lambda
Перейдем к первой оптимизации.
Создание лямбда-функций без замыканий на самом деле создает одну и ту же объект, если мы говорим в контексте одного и того же класса.
Соответственно лямбда-функция без замыкания может быть создана единожды в статической памяти и переиспользованна множество раз.

На слайде показана схема оптимизации, слева находится код до оптимизации: создание лямбды каждый раз создает одну и ту же анонимную функцию, что ведет за собой издержки как по памяти, так и по времени. Справа вы можете видеть новую схему: создание лямбда-функции заменено на инструкцию, которая читает анонимную функцию с некоторого фиксированного адреса, что позволяет избежать предыдущих издержек.

Данная оптимизация может помочь только в случае отсутствия замыкания, но как оптимизировать другие случаи?


# Evacuate analysis
Перейдем к анализу эвакуаций. Рассмотрим его идею.

Давайте ослабим условие на добавление в массив. Должен добавить, что ослабим условие не только на добавление в массив, как в этом примере, а на некоторое множество операций над объектом, которые будут называться утеканиями, но я об этом расскажу чуть позже. Соответственно после этого мы сможем стекаллоцировать лямбда-функцию. 
Но что будет, если управление дойдет до добавления в массив?
Такое поведение будет некорректным, т.к. после того как мы выйдем из локальной области видимости, указатель, который указывал на позицию в стеке, может быть некорректным, так как объект, на который он указывает, может быть перетёрт другими переменными на стеке.
В таких случаях будем копировать объект со стека на кучу, и использовать уже скопированное значение.
Аналогичным образом поступим и с аргументами функции.

# Algorithm
Как я уже упоминал, существуют утекающие использования помимо присваивания в массив. Всего таких использований четыре типа. Рассмотрим их.

1. Присваивание в массив, которое было в примере, поле другого объекта или глобальную переменную.
2. Возвращение из функции, если лямбда-функция была создана внутри функции.
3. Возврат объекта, если объект возвращается как неэвакуируемый родительский класс.
4. Передачу в функцию, если объект передается как неэвакуируемый родительский класс.

# Local part
Перейдем непосредственно к анализу, а именно к его локальной части. Разберем его по шагам на чуть более усложненном предыдущем примере.
1. Находим все источники лямбда-функций -- это все создания лямбда-функций и параметры функционального типа. В данном примере это создание лямбда-функции l, и аргумент pred функции foo.
2. Находим все использования источников. В данном случае это передача в функцию foo, два добавления в массив для создания лямбды, и вывод на вызов самой лямбды и добавление в статическую переменную для аргумента функции pred.
3. Заменяем создания объекта на стековую аллокацию, если существует хотя бы одно неутекаемое использование. В данном примере лямбду можно поместить на стек, так как у нее есть неутекаемое использование в виде передаче в функцию foo.
4. Также, в ходе работы над оптимизацией, была реализована оптимизация оптимизации -- можно заменять все эвакуации в одном базовом блоке. Иными словами, если на линейном участке есть несколько эвакуаций одного и того же объекта, то их можно объединить в один.

На этом локальная часть анализа закончена.

# Interprocedural part
Перейдем к межпроцедурной части.
Вернем изначальное состояние примера, так как данная часть анализа должна производиться до того как мы будем расставлять эвакуации.
Итак, будем рассматривать все функции, которые содержат параметр функционального типа. В данном случае это функция foo.
Для каждого параметра нам нужно проверить: существует ли утекающие использования, которые доминируют выход из функции. Другими словами: есть ли такое использование, через которое точно пройдет управление.
Если такое использование есть, то помечаем этот аргумент как утекающий, но не требующий эвакуации.
Далее используем данную информацию при локальном анализе. Собираем использования, и, учитывая, что лямбда передается как эвакуируемый объект, оказывается, что все использования объекта являются утекающими, соответственно лямбда остается на куче.

# Тестовый стенд
Анализ был реализован и протестирован на тестовой сборке мультиязыковой виртуальной машине Huawei VM.

# Results
Замеры были сделаны на специализированном наборе микробенчмарков, которые были написаны для этого анализа.

Рассмотрим три множества микробенчмарков.
1. LambdaWithoutContext --- набор, который тестирует производительность при различных сценариях использования лямбда-функций без замыкаемых значений. Как видно из таблицы, синглтон лямбда сократило время исполнения почти на четверть.
2. CEscape.LWC --- набор, который тестирует производительность сценария, при котором лямбда-функция с замыканием утекает под невычислимым условием, но исполнение до него этого использования никогда не доходит, так как условие всегда вычисляется в false.
3. Escape.LambdaWithoutContext --- набор, который является контрпримером для анализа-эвакуаций: объект передается в функции, в которой он безусловно утекает. В данном примере межпроцедурный анализ предотвратил стековую аллокацию, но, тем не менее, эвакуация была поставлена и эти девять процентов отражают издержки на проверки в эвакуации.

# Заключение
1. Оптмизация лямбда синглтон была реализована.
2. Локальная и межпроцедурная части анализа эвакуаций были разработаны и реализованы.
3. Решение было протестировано на Huawei VM.

# Further areas of work
1. Улучшить алгоритм расстановки эвакуаций. Как я уже упоминал, эвакуации объединяются в одном базовом блоке, но можно как-нибудь использовать топологию графа управления для более качественной расстановки.
2. Ввести специализированные эвакуации для сокращения временных издержек.
3. Тестирование анализа на реальных проектах или бенчмарках общего назначения.

# Thank you for your attention